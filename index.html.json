{
    "components": [
        {
            "index": 0,
            "id": "b2d5089cc59f6fef06e68ec2f3ffc32cbee153c0",
            "name": "button",
            "src": "components/button/button.njk",
            "url": "components\\button\\button.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"title\": \"蛋白质水解\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 按钮组件\r\n\r\n## Features\r\n\r\n- 为了便于开发，提取为组件使用\r\n\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n   import h_button from '../../../../src/component/ui/button.vue';\r\n```\r\n\r\n### statement\r\n\r\n在导入文件后在components中声明组件\r\n\r\n```sh\r\n   components: {\r\n       h_button\r\n    },\r\n```\r\n\r\n### use\r\n直接以标签的形式引入组件,传入相应参数即可：\r\ntitle表示按钮显示的值\r\n\r\n```sh\r\n    <h_button title=\"蛋白质水解\"></h_button>\r\n\r\n        data() {\r\n            return {\r\n               disabledSJ: false\r\n            };\r\n        },\r\n```"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "UI"
                    }
                }
            ]
        },
        {
            "index": 1,
            "id": "6a7a1293a33cc3f6aa47a7b1b8a8518e4ad67e40",
            "name": "counter",
            "src": "components/counter/counter.njk",
            "url": "components\\counter\\counter.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"./project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"counterNum\": \"Number\",\r\n  \"countDisabled\": \"Number\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 计数器组件\r\n\r\n## Features\r\n\r\n- 为了快速开发微件,所开发的计数器组件\r\n\r\n## Attributes\r\n- counterNum 计数器的总个数\r\n- countDisabled 计数器的初始个数\r\n\r\n## functions\r\n- counterPlus()  计数器+1的方法\r\n- counterLess()  计数器-1的方法\r\n- reset()        重置计数器的方法\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import counter from '../../../../src/component/ui/counter.vue';\r\n```\r\n\r\n### statement\r\n导入组件后声明组件\r\n\r\n```sh\r\n   components: {\r\n      counter\r\n    },\r\n```\r\n\r\n### use\r\n直接以标签的形式引入组件，并配置参数\r\n```sh\r\n   <counter v-bind=\"counterOption\"  ref=\"countTest\" v-model=\"num\"></counter>\r\n```\r\n\r\n配置需要的参数，如果不传有默认值\r\n```sh\r\ndata() {\r\n            return{\r\n                num: 0,\r\n                counterOption:{\r\n                    counterNum: 5,    //默认值为4\r\n                    countDisabled: 0  //默认值为0\r\n                }\r\n            };\r\n        }\r\n```\r\n调用组件内的方法\r\n```sh\r\n(this.$refs.countTest as any).counterPlus();\r\n(this.$refs.countTest as any).counterLess();\r\n(this.$refs.countTest as any).reset();\r\n```\r\n"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "UI"
                    }
                }
            ]
        },
        {
            "index": 2,
            "id": "ec8d626446f151fb13c9e7cda58415e58155c1cf",
            "name": "exercise_layout",
            "src": "components/exercise_layout/exercise_layout.njk",
            "url": "components\\exercise_layout\\exercise_layout.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"./demo/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"exercise\": \"Exercise\",\r\n  \"resizeCall\": \"Function\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 习题布局\r\n\r\n## Features\r\n\r\n习题布局组件，基于题类微件共性所提取的布局。\r\n\r\n主要特征有：\r\n\r\n- 左侧为题类解析区域(宽度 38.2%)，右侧为内容区域(宽度 61.8%);\r\n- 题干在顶部区域，层级最高;\r\n- 默认第一次进入微件时题干铺满全屏，显示点击开始按钮，题干区域向上滑出，进入习题;\r\n- 左侧解析区域可手动滑进屏幕内，题干也可从屏幕上方滑下;\r\n- 解析区域的每一个步骤高度都大于等于屏幕高度，右侧内容区域随着解析区域的改变而改变;\r\n- 当解析区步骤显示整屏高度的66%时，则显示当前解析步骤对应的内容;\r\n\r\n<!-- ![习题组件](../images/xiti.gif) -->\r\n\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import exerciseLayout from '../../../../src/component/layout/exercise_layout.vue';\r\n```\r\n\r\n### statement\r\n\r\n在导入文件后在components中声明组件\r\n\r\n```sh\r\n   components: {\r\n      exerciseLayout\r\n    },\r\n```\r\n\r\n### use\r\n\r\n页面中直接以标签的形式引入组件,传入相应参数即可；\r\ntemplate标签内用来写内容区html\r\n\r\n```sh\r\n     <exerciseLayout v-bind=\"exerciseOption\">\r\n      <template slot=\"box\" slot-scope=\"box\">\r\n        <div  id=\"box\" style=\"width: 100%;height: 100%;display: flex\">\r\n            <div class=\"button_Image\">\r\n               <label for=\"checkbox-1\" id=\"s1\" class=\"control-block_div_border switch enableAnim\" style=\"margin-top:10px;width: 200px;color:#000000\">\r\n                <input type=\"checkbox\" name=\"checkbox-cats[]\" id=\"checkbox-1\" value=\"1\" v-model=\"showImage\" >\r\n                <label for=\"checkbox-1\">辅助图示</label>\r\n              </label>\r\n            </div>\r\n            <div class=\"model_content\">\r\n                <div  id=\"3dModel\" class=\"model3d_content transtaion_animation2\" style=\"\">\r\n\r\n                </div>\r\n\r\n                <div class=\"image1\">\r\n                    <img class=\"image_one\" src=\"./sub_static/image1.png\" style=\"\" v-show=\"showImage\"/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n      </template>\r\n\r\n    </exerciseLayout>\r\n```\r\n\r\n标签绑定的属性\r\n\r\n```sh\r\n  data() {\r\n        return{\r\n                exerciseOption = {\r\n                    exercise: {\r\n                        question : {\r\n                            title : '晶胞原子数的计算1',\r\n                            coverImage : questionCoverImg\r\n                        },\r\n\r\n                        analyticArray:  [{\r\n                            title : '解析一',\r\n                            stepArray : [\r\n                                { coverImage: analytic1Img , call: () => {\r\n\r\n                                    }},\r\n                            ]\r\n                        }]\r\n                    },\r\n                    resizeCall: {},\r\n                    analyticArray: ['解析一']\r\n                };\r\n        };\r\n    },\r\n\r\n```\r\n\r\n## Options组件参数\r\n\r\n|    参数名     | 参数类型  | 是否必须|说明|\r\n| ----------   | ---       |---|--------|\r\n| exercise     |  Exercise | 是|习题对象，包含题干和解析|\r\n| resizeCall   |  Function | 否|解析左右滑动时，视图区大小改变的回调函数|\r\n| analyticArray|  Array    | 是|解析种类，必传参数，如果只有一种解析可传任意字符，必须和Exercise对象中的解析数组一致|\r\n\r\n## Attributes\r\n\r\n### Exercise 习题对象\r\n\r\n    //题目\r\n    question: Questions;\r\n\r\n    //解析\r\n    analyticArray: Array<Analytic>;\r\n\r\n    //当左侧解析拉入/拉出 整体页面resize时的回调\r\n    resizeCall: Function;\r\n\r\n### Questions  题干对象\r\n\r\n    //标题\r\n    title: string;\r\n\r\n    //封面图\r\n    coverImage: string;\r\n\r\n### Analytic 解析对象\r\n \r\n    //解析标题\r\n    title: string;\r\n\r\n    //步骤数组\r\n    stepArray: Array<Step>;\r\n\r\n### Step 步骤对象\r\n\r\n    //解析的标题\r\n    title: string;\r\n\r\n    //解析内容\r\n    analytic: string;\r\n\r\n    //自定义解析内容 domid\r\n    customDom: string;\r\n\r\n    //封面图\r\n    coverImage: string;\r\n\r\n    //滑动到对应解析时的回调函数\r\n    call: Function;"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Layout"
                    }
                }
            ]
        },
        {
            "index": 3,
            "id": "6416c0c01d62844dac875d5462985365894c4869",
            "name": "fullScreens_layout",
            "src": "components/fullScreens_layout/fullScreens_layout.njk",
            "url": "components\\fullScreens_layout\\fullScreens_layout.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"./project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n    \r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 全屏布局组件\r\n\r\n## Features\r\n\r\n- 为了快速布局,所开发的布局组件\r\n\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import fullScreensLayout from '../../../../src/component/layout/fullScreens_layout.vue';\r\n```\r\n\r\n### statement\r\n\r\n在导入文件后在components中声明组件\r\n\r\n```sh\r\n   components: {\r\n      fullScreensLayout\r\n    },\r\n```\r\n\r\n### use\r\n直接以标签的形式引入组件,并绑定对应的name及id,进行重写,\r\n3dContainer为主内容区,controlPanel为控件区\r\n```sh\r\n    <fullScreensLayout>\r\n            <template slot=\"viewBox\" slot-scope=\"viewBox\">\r\n                <div id=\"3dContainer\">\r\n                  <!--  Core code -->\r\n                </div>\r\n            </template>\r\n            <template slot=\"controlPanel\" slot-scope=\"controlPanel\">\r\n                <div id=\"controlPanel\">\r\n                 <!--  Core code -->\r\n                </div>\r\n            </template>\r\n        </fullScreensLayout>\r\n```\r\n"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Layout"
                    }
                }
            ]
        },
        {
            "index": 4,
            "id": "3e1e4a2dcae6b08bfad5999ccb9f8eb5d640a35d",
            "name": "keyFrameAnimation",
            "src": "components/keyFrameAnimation/keyFrameAnimation.njk",
            "url": "components\\keyFrameAnimation\\keyFrameAnimation.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"./object/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"isInfinite\": \"Boolean\",\r\n  \"width\": \"Number\",\r\n  \"height\": \"Number\",\r\n  \"showSlider\": \"Boolean\",\r\n  \"timeLine\": \"[]:Number\",\r\n  \"label\": \"[]:string\",\r\n  \"interval\": \"Number\",\r\n  \"animationName\": \"String\",\r\n  \"playRange\": \"[]:Number\",\r\n  \"image\": \"[]:string\",\r\n  \"timeLineLength\": \"Number\",\r\n  \"zipUrl\": \"String\",\r\n  \"imageNum\": \"Number\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "   # 关键帧动画组件\r\n\r\n## Features\r\n\r\n- 为了快速开发关键帧动画系列的微件,所开发的vue组件\r\n  \r\n\r\n## 属性\r\n  - image\r\n  - timeLineLength\r\n  - zipUrl\r\n  - imageNum\r\n  - isInfinite\r\n  - width\r\n  - height\r\n  - showSlider\r\n  - timeLine\r\n  - label\r\n  - interval\r\n  - animationName\r\n  - playRange\r\n \r\n\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import keyFrameAnimation from '../../../../src/component/layout/keyFrameAnimation.vue';\r\n```\r\n\r\n### statement\r\n\r\n在导入文件后在components中声明组件\r\n\r\n```sh\r\n   components: {\r\n      keyFrameAnimation\r\n    },\r\n```\r\n\r\n### use\r\n\r\n#### 配置属性\r\n\r\n```sh\r\n    <keyFrameAnimation v-bind=\"animationOption\">    \r\n    </keyFrameAnimation>\r\n\r\n\r\ndata() {\r\n        return {\r\n            animationOption: {\r\n                \r\n            /*\r\n            * 必传参数\r\n            * 可以传入zip包或传入图片数组\r\n            * */\r\n\r\n            //传入图片数组所必须配置的参数\r\n\r\n            //图片数组\r\n            image: [],\r\n\r\n            //时间轴的长度  , 在所有图片传入image后传入时间轴长度\r\n            timeLineLength:0,\r\n\r\n            //传入ZIP包所必须配置的参数\r\n\r\n            //zip包路径\r\n            zipUrl: require('./sub_static/part_hydrolysis.zip'),\r\n\r\n            //图片的总数\r\n            imageNum: 100,\r\n\r\n            /*\r\n            * 非必传参数\r\n            * */\r\n            //是否无限执行,默认为false\r\n            isInfinite: true,\r\n\r\n            //主内容区的宽高 ，默认为680*360\r\n            width:680,\r\n            height:360,\r\n\r\n            //是否显示滑动条 ， 默认为true\r\n            showSlider: false,\r\n\r\n            //滑条上的点,如果传入该值也需要传入lable值\r\n            timeLine: [0, 99],\r\n\r\n            //点上的标签\r\n            label: ['', ''],\r\n\r\n            //动画执行的时间间隔,毫秒为单位\r\n            interval: 80,\r\n\r\n            //同一个项目多次调用组件需要传入name值\r\n            animationName: 'sliderComponent',\r\n\r\n            //播放某段动画所需要传入的范围数组，如[20, 50],是从第21帧播到第51帧\r\n            playRange: [20,50],\r\n        },\r\n    }\r\n}\r\n```\r\n\r\n#### 获取当前动画进度\r\n```sh\r\n  <keyFrameAnimation v-bind=\"animationOption\" v-model=\"frameNum\">    \r\n  </keyFrameAnimation>\r\n  \r\n  data() {\r\n        return {\r\n            frameNum: 0\r\n        }\r\n    }\r\n```\r\n#### 方法\r\n\r\n组件对外暴露了开始播放、暂停播放、重置以及刷新滑动条样式的方法，可以通过以下方式调用。\r\n组件在同一个项目中被多次调用切换时会出现滑动条数值错误的情况，需要调用刷新方法。\r\n\r\n```sh\r\n  <keyFrameAnimation v-bind=\"animationOption\" v-model=\"frameNum\" ref=\"animationFunction\">    \r\n  </keyFrameAnimation>\r\n\r\n  this.$refs.animationFunction.play();\r\n  this.$refs.animationFunction.pause();\r\n  this.$refs.animationFunction.reset();\r\n  this.$refs.animationFunction.refresh();\r\n```"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Componts"
                    }
                }
            ]
        },
        {
            "index": 5,
            "id": "33484f3ed0227ee84889bbcb723ef7aeaa4159b0",
            "name": "leftAndRight_layout",
            "src": "components/leftAndRight_layout/leftAndRight_layout.njk",
            "url": "components\\leftAndRight_layout\\leftAndRight_layout.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"./object/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"widthClass\": \"w320\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 左右布局组件\r\n\r\n## Features\r\n\r\n- 为了快速布局,所开发的布局组件\r\n\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import leftAndRightLayout from '../../../../src/component/layout/leftAndRightLayout.vue';\r\n```\r\n\r\n### statement\r\n\r\n在导入文件后在components中声明组件\r\n如果需要使用320宽度的控件区需要传入\r\n一个属性 widthClass: 'w320' \r\n\r\n```sh\r\n   components: {\r\n      leftAndRightLayout\r\n    },\r\n```\r\n\r\n### use\r\n直接以标签的形式引入组件,并绑定对应的name及id,进行重写,\r\n3dContainer为主内容区,controlPanel为控件区\r\n```sh\r\n    <leftAndRightLayout>\r\n            <template slot=\"viewBox\" slot-scope=\"viewBox\">\r\n                <div id=\"3dContainer\">\r\n                  <!--  Core code -->\r\n                </div>\r\n            </template>\r\n            <template slot=\"controlPanel\" slot-scope=\"controlPanel\">\r\n                <div id=\"controlPanel\">\r\n                 <!--  Core code -->\r\n                </div>\r\n            </template>\r\n    </leftAndRightLayout>\r\n    \r\n```\r\n\r\n使用320宽度的控件区\r\n```sh\r\n  <leftAndRightLayout  v-bind=\"layoutOption\">\r\n            <template slot=\"viewBox\" slot-scope=\"viewBox\">\r\n                <div id=\"3dContainer\">\r\n                  <!--  Core code -->\r\n                </div>\r\n            </template>\r\n            <template slot=\"controlPanel\" slot-scope=\"controlPanel\">\r\n                <div id=\"controlPanel\">\r\n                 <!--  Core code -->\r\n                </div>\r\n            </template>\r\n    </leftAndRightLayout>\r\n\r\n\r\n\r\n    data() {\r\n        return {\r\n            layoutOption: {\r\n                widthClass: 'w320'\r\n            },\r\n        }\r\n    }\r\n```\r\n\r\n"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Layout"
                    }
                }
            ]
        },
        {
            "index": 6,
            "id": "a2f874630fa3a06f82996ef8b125f262742d313e",
            "name": "Line",
            "src": "components/Line/Line.njk",
            "url": "components\\Line\\Line.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"startPoint\": \"new THREE.Vector3(-75, 0, -6)\",\r\n  \"endPoint\": \"new THREE.Vector3(75, 0, -6)\",\r\n  \"color\": \"'#1ACEFF'\",\r\n  \"lineWidth\": \"3\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "## 可设置线宽的线条组件使用说明\r\n\r\n- 属性\r\n    - startPoint：THREE.Vector3\r\n    - endPoint：THREE.Vector3\r\n    - color：any\r\n    - lineWidth：number\r\n    - dashLine：boolean\r\n    - dashSize：number\r\n    - gapSize：number\r\n    - depthTest：boolean\r\n\r\n## Use\r\n```sh\r\n    const line = new Line();\r\n\r\n        // 画线\r\n        const lineMesh = line.createLine({\r\n            startPoint: new THREE.Vector3(75, 0, 0),\r\n            endPoint: new THREE.Vector3(-75, 0, 0),\r\n            lineWidth: 3000,\r\n            color: '#1ACEFF',\r\n        });\r\n\r\n        this.scene.add(lineMesh);\r\n\r\n```\r\n\r\n\r\n## startPoint\r\n- **必传参数** 起始点的坐标\r\n\r\n## endPoint\r\n- **必传参数** 终止点的坐标\r\n\r\n## color\r\n- **非必传参数** 线条的颜色默认颜色为'#000000'\r\n\r\n## lineWidth\r\n- **非必传参数** 线条的宽度默认为1\r\n\r\n## dashLine\r\n- **非必传参数** 是否是虚线（默认为false）\r\n\r\n## dashSize\r\n- **非必传参数** 破折号（-）的大小。默认为5\r\n\r\n## gapSize\r\n- **非必传参数** 间隙的大小。默认为5\r\n\r\n## depthTest\r\n- **非必传参数** 深度测试\r\n"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Three-Componts"
                    }
                }
            ]
        },
        {
            "index": 7,
            "id": "d3a258b423cc8013e7cd75fcceec2f0f0574a310",
            "name": "ModelAnimationGroup",
            "src": "components/ModelAnimationGroup/ModelAnimationGroup.njk",
            "url": "components\\ModelAnimationGroup\\ModelAnimationGroup.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n    \"label\": \"ModelAnimationGroup\",\r\n    \"model\": \"any\",\r\n    \"animation\": \"Array<AnimationClip>\",\r\n    \"mixer\": \"AnimationMixer\",\r\n    \"actionArry\": \"Array<AnimationAction>\",\r\n    \"clock\": \"THREE.Clock()\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 3d模型动画组组件\r\n\r\n## Features\r\n\r\n- 用来解决模型多组，动画的切换\r\n\r\n\r\n## How to use\r\n### import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import ModelAnimationGroup from '../../../../src/three/component/ModelAnimationGroup';\r\n```\r\n\r\n\r\n### use\r\n\r\n```sh\r\n\r\nconst jt: any = await this.gltfLoader(WKGltf as any);\r\n        jt.scene.traverse((child: any) => {\r\n            if (child instanceof Scene) {\r\n                this.model = child;\r\n                this.model.scale.set(1, 1, 1);\r\n                this.model.position.set(0, -60, 0);\r\n                this.scene.add(this.model);\r\n            }\r\n});\r\nthis.modelAnimatin = new ModelAnimationGroup(jt);\r\n(window as any).viewHandler.viewModel.$data.modelAniamtionGroup = this.modelAnimatin.getAnimationGroupNum();\r\nthis.modelAnimatin.playAnimation(3);\r\n\r\n```\r\n## parameter\r\n### model \r\n- **必传参数** - 模型，\r\n\r\n### animation \r\n- **非必传参数** - 动画组\r\n\r\n### mixer\r\n- **非必传参数** - 动画混音器\r\n\r\n### actionArry\r\n- **非必传参数** - 动画播放器 \r\n\r\n### clock\r\n- **非必传参数** - 动画时钟\r\n\r\n\r\n## method\r\n1. playAnimation(val: number)  参数val：表示模型第几组动画\r\n\r\n    播放模型动画\r\n\r\n2. pauseAnimation(val: number)  参数val：表示模型第几组动画 \r\n\r\n    暂停模型动画\r\n\r\n3. resetAnimation()\r\n\r\n    重置模型动画\r\n\r\n4. setAnimationDoubleSpeed(val: number, timescale: number)  \r\n    参数 val：表示模型第几组动画    timescale ： 表示时间缩放因子\r\n\r\n    设置模型动画倍速\r\n\r\n5. switchAniamtion(val: number) 参数val：表示模型第几组模型动画\r\n\r\n    切换模型动画组动画\r\n\r\n6. renderModel()\r\n\r\n    在render函数中使用\r\n\r\n7. getAnimationGroupLength() 返回值类型 number\r\n\r\n    获取模型动画组长度\r\n\r\n8. getAnimationGroupArray() 返回值类型 Array\r\n\r\n    获取模型动画组动画\r\n\r\n\r\n\r\n\r\n"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Componts"
                    }
                }
            ]
        },
        {
            "index": 8,
            "id": "900a5f8a3a685c150d7a4f63e7965a23de89605f",
            "name": "select",
            "src": "components/select/select.njk",
            "url": "components\\select\\select.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"project/index.html\"></iframe>\r\n"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"listData\": \"Array.from({length: 19}, (value, index) => -9 + index)\",\r\n  \"month\": \"7\",\r\n  \"parameter1\": \"2\",\r\n  \"type\": \"cycle\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 轮盘组件\r\n\r\n## Features\r\n\r\n- 为了便于开发，提取为组件使用\r\n\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import seletIos from '../../../../src/component/ui/select.vue';\r\n```\r\n\r\n### statement\r\n\r\n在导入文件后在components中声明组件\r\n\r\n```sh\r\n   components: {\r\n      seletIos\r\n    },\r\n```\r\n\r\n### use\r\n直接以标签的形式引入组件,传入相应参数即可：\r\n其中listData为轮盘显示值的集合，\r\nmonth为轮盘显示默认值，\r\ntype为轮盘显示样式，'cycle'表示轮盘为滚轮样式，'line'表示轮盘为线性样式，默认为'line',\r\nparameter1为轮盘拨动的加速度，默认为1.8.\r\n\r\n```sh\r\n   <selet-ios :listData=\"listData\" v-model=\"month\" type=\"cycle\" v-bind=\"selectParameter\" ref=\"spin\">\r\n   </selet-ios>\r\n\r\n        data() {\r\n            return {\r\n                listData: Array.from({length: 19}, (value, index) => -9 + index),\r\n                month: 7,\r\n\r\n                selectParameter: {\r\n                    parameter1: 2,\r\n                },\r\n            };\r\n        },\r\n```"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "UI"
                    }
                }
            ]
        },
        {
            "index": 9,
            "id": "fc7e9170c78a56eff10fcd8d7d6e0805010f2f67",
            "name": "SliderControlLine",
            "src": "components/SliderControlLine/SliderControlLine.njk",
            "url": "components\\SliderControlLine\\SliderControlLine.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"color\": \"light\",\r\n  \"label\": \"SliderControlLine\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# SliderControlLine\r\n\r\nSliderControlLine类文档使用说明\r\n\r\n## Contents\r\n\r\n- [SliderControlLine](#SliderControlLine)\r\n\t- [Contents](#contents)\r\n\t- [Import](#import)\r\n    - [Attributes](#attributes)\r\n    - [Methods](#methods)\r\n\t- [How to use](#how-to-use)\r\n\r\n\r\n## import\r\n导入类  \r\nimport SliderControlLine\r\n\r\n## Attributes\r\n属性\r\n1.  sliderPoint  \r\n    滑点\r\n2.  controlPoint  \r\n    控点 \r\n3.  line  \r\n    直线\r\n4.  lastPointX    \r\n    滑点鼠标按下或触摸开始的X坐标\r\n5.  lastPointY    \r\n    滑点鼠标按下或触摸开始的Y坐标\r\n6.  currentPointX    \r\n    滑点当前移动X坐标\r\n7.  currentPointY    \r\n    滑点当前移动Y坐标\r\n8.  imgControl  \r\n    滑点控制器\r\n9.  angle  \r\n    直线旋转角度  \r\n10. dragControls  \r\n    注册控点拖拽对象\r\n11. domWidth  \r\n    dom宽度\r\n12. domHeight  \r\n    dom高度\r\n\r\n \r\n## Methods\r\n主要方法 \r\n1. initSliderPointTouchEvent()    \r\n用来初始化滑点的触摸事件\r\n\r\n2. initControlPointDragEvent()  \r\n用来初始化控点的拖拽事件\r\n\r\n3. initSliderPointMouseEvent()  \r\n用来初始化滑点的鼠标事件  \r\n\r\n## How to use\r\n在使用处创建一个SliderControlLine对象\r\n\r\n例如\r\nconst sliderControlLine = new SliderControlLine(line, sliderPoint, controlPoint);\r\n\r\n\r\n"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Three-Componts"
                    }
                }
            ]
        },
        {
            "index": 10,
            "id": "6a9bc00d703dc0be0b547ba419192775a5dd42a8",
            "name": "SpreadAnimation",
            "src": "components/SpreadAnimation/SpreadAnimation.njk",
            "url": "components\\SpreadAnimation\\SpreadAnimation.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"./project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"topRadius\": \"25\",\r\n  \"bottomRadius\": \"25\",\r\n  \"height\": \"100\",\r\n  \"segment\": \"3\",\r\n  \"animationTime\": \"1.5\",\r\n  \"planColor\": \"'#6384C5'\",\r\n  \"lineColor\": \"'#000000'\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "## 棱锥、棱台、棱柱展开动画组件使用说明\r\n\r\n- 属性\r\n    - topRadius\r\n    - bottomRadius\r\n    - height\r\n    - segment\r\n    - lineColor\r\n    - planColor\r\n    - animationTime\r\n\r\n- 方法\r\n    - startAnimation： 开始动画\r\n    - reverseAnimation：反转动画\r\n    - resetAnimation：重置动画\r\n\r\n\r\n## topRadius\r\n- **必传参数** 设置上底面半径（此半径是上底面每个边的中心距离原点的半径）\r\n\r\n## bottomRadius\r\n- **必传参数** 设置下底面半径（此半径是下底面每个边的中心距离原点的半径）\r\n\r\n## height\r\n- **必传参数** 设置模型的高度\r\n\r\n## segment\r\n- **必传参数** 设置上下底面的边数（如：上下底面半径相同设置为3就是三棱柱）\r\n\r\n## lineColor\r\n- **非必传参数** 设置边框线条的颜色，默认颜色是'#4A90E2'\r\n\r\n## planColor\r\n- **非必传参数** 设置模型的颜色，默认颜色是'#CFEAF8'\r\n\r\n## animationTime\r\n- **非必传参数** 设置动画持续时间，默认时间是3秒\r\n"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "Three-Componts"
                    }
                }
            ]
        },
        {
            "index": 11,
            "id": "8c2e0057a557b38aaf2347c59dcbb43a6ed6d72a",
            "name": "vue2-slider",
            "src": "components/vue2-slider/vue2-slider.njk",
            "url": "components\\vue2-slider\\vue2-slider.html",
            "data": [
                {
                    "id": "view",
                    "label": "View",
                    "languages": [
                        "twig"
                    ],
                    "index": 0,
                    "data": "<iframe style=\"width:100%;height:100%;\" src=\"project/index.html\"></iframe>"
                },
                {
                    "id": "data",
                    "label": "Data",
                    "languages": [
                        "json",
                        "js"
                    ],
                    "index": 1,
                    "data": "{\r\n  \"sliderNumber\": \"45\",\r\n  \"sliderOption\": \"{...}\"\r\n}"
                },
                {
                    "id": "notes",
                    "label": "Notes",
                    "languages": [
                        "markdown"
                    ],
                    "index": 2,
                    "data": "# 滑条组件\r\n\r\n## Features\r\n\r\n- 为了便于开发，提取为组件使用\r\n\r\n## How to use\r\n\r\n### Import\r\n\r\n使用以下方式导入组件\r\n\r\n```sh\r\n  import vueSlider from '../../../../src/component/ui/vue2-slider.vue';\r\n```\r\n\r\n### statement\r\n\r\n在导入文件后在components中声明组件\r\n\r\n```sh\r\n   components: {\r\n      vueSlider\r\n    },\r\n```\r\n\r\n### use\r\n直接以标签的形式引入组件,传入相应参数即可：\r\nsliderNumber为滑条的实时值，设置为45表示初始滑条值为45，\r\nsliderOption表示滑条的显示样式.\r\n\r\n\r\n```sh\r\n    <vue-slider ref=\"slider\" v-model=\"sliderNumber\" v-bind=\"sliderOption\">\r\n    </vue-slider>\r\n\r\n        data() {\r\n            return {\r\n                sliderNumber: 45,\r\n                sliderOption: {\r\n                    width: \"100%\",\r\n                    min: 0,\r\n                    max: 360,\r\n                    piecewise: false,\r\n                    tooltip: 'always',\r\n                    piecewiseLabel: false,\r\n                    speed: 0,\r\n                    piecewiseStyle: {\r\n                        \"backgroundColor\": \"#FFFFFF\",\r\n                        \"visibility\": \"visible\",\r\n                        \"width\": \"24px\",\r\n                        \"height\": \"24px\"\r\n                    },\r\n                    piecewiseActiveStyle: {\r\n                        \"backgroundColor\": \"#5CAEFD\"\r\n                    }\r\n                },\r\n            };\r\n        },\r\n```"
                },
                {
                    "id": "config",
                    "label": "Config",
                    "languages": [
                        "json"
                    ],
                    "index": 3,
                    "data": {
                        "group": "UI"
                    }
                }
            ]
        }
    ],
    "opts": {
        "lang": "en",
        "title": "Malvid",
        "description": "UI to help you build and document web components.",
        "src": "src/",
        "pattern": "**/[^_]*.{ejs,njk,hbs,twig}",
        "resolvers": [
            {
                "id": "view",
                "label": "View",
                "languages": [
                    "twig"
                ]
            },
            {
                "id": "data",
                "label": "Data",
                "languages": [
                    "json",
                    "js"
                ]
            },
            {
                "id": "notes",
                "label": "Notes",
                "languages": [
                    "markdown"
                ]
            },
            {
                "id": "config",
                "label": "Config",
                "languages": [
                    "json"
                ]
            }
        ],
        "statuses": {
            "wip": {
                "label": "WIP",
                "description": "Work in progress",
                "color": "#fe913d"
            },
            "pending": {
                "label": "Pending",
                "description": "Ready, but waiting for finalization",
                "color": "#2d90e8"
            },
            "ready": {
                "label": "Ready",
                "description": "Ready to implement",
                "color": "#2bc052"
            }
        },
        "optimize": true
    }
}